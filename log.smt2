***********************************************
*                 initGrammar                 *
-----------------------------------------------
Input
$OREXPRESSION = $COMPARAISON | $EXPRESSION $OROP $EXPRESSION 

$EXPRESSION = $OREXPRESSION | $NOTOP $EXPRESSION

$COMPARAISON = $TERM $COMPOP $TERM 

$COMPOP = " > " | " = " | " < " 

$OROP = " or " 

$NOTOP = " not "  

$TERM = $NUMBER | $STRING | $QUOTE $TERM $QUOTE 

$NUMBER = [0-9]+ 

$STRING = [a-z]+ 

$QUOTE = "\"" 


165 $COMPARAISON: (((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)((( > )~( = )~( < )))(((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)
165 $COMPOP: (( > )~( = )~( < ))
165 $EXPRESSION: (( not ))*(( not ))*((((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)((( > )~( = )~( < )))(((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*))(( or )(( not ))*(( not ))*((((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)((( > )~( = )~( < )))(((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)))*
165 $NOTOP:  not 
165 $NUMBER: [0-9]+
165 $OREXPRESSION: (( not ))*((((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)((( > )~( = )~( < )))(((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*))(( or )(( not ))*(( not ))*((((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)((( > )~( = )~( < )))(((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)))*
165 $OROP:  or 
165 $QUOTE: \"
165 $STRING: [a-z]+
165 $TERM: ((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*
Input file: grmTest.smt2

Grammar file: sql.grm

262 creating /tmp/fat_str_convert/: OK
***********************************************
*              initGraph             *
-----------------------------------------------
 w,
(assert (GrammarIn w (Str2Grm "QOREXPRESSION")))     

 g,
(assert (GrammarIn g (Str2Grm "QTERM")))


(assert (GrammarIn "samsung" (Str2Grm "QTERM")))

 j,
(assert (= j " > samsung"))   

 w, g, j,
(assert (= w (Concat g j)))    
(check-sat)
***********************************************
*              convertFile             *
-----------------------------------------------
244 creating /tmp/fat_str_convert/: OK
***********************************************
*              fat_theory                     *
-----------------------------------------------
String Input Var Set
***********************************************
w
g
j

***********************************************
Input loaded:
-----------------------------------------------
(and (GrammarIn w
                (Str2Grm __cOnStStR__x51_x4f_x52_x45_x58_x50_x52_x45_x53_x53_x49_x4f_x4e))
     (GrammarIn g (Str2Grm __cOnStStR__x51_x54_x45_x52_x4d))
     (GrammarIn __cOnStStR__x73_x61_x6d_x73_x75_x6e_x67
                (Str2Grm __cOnStStR__x51_x54_x45_x52_x4d))
     (= j __cOnStStR__x20_x3e_x20_x73_x61_x6d_x73_x75_x6e_x67)
     (= w (Concat g j)))
-----------------------------------------------


>> cb_reduce_app(): Others --> (Str2Grm QOREXPRESSION)


>> GrammarIn(w, (Str2Grm QOREXPRESSION))
 --> 
w  \in  (( not ))*((((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)((( > )~( = )~( < )))(((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*))(( or )(( not ))*(( not ))*((((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)((( > )~( = )~( < )))(((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*)))*


>> cb_reduce_app(): GrammarIn(w, (Str2Grm QOREXPRESSION)) ==> (= w
   (NonDet_AutomataDef
     |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
     0))


>> cb_reduce_app(): Others --> (Str2Grm QTERM)


>> GrammarIn(g, (Str2Grm QTERM))
 --> 
g  \in  ((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*


>> cb_reduce_app(): GrammarIn(g, (Str2Grm QTERM)) ==> (= g (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1))


>> GrammarIn("samsung", (Str2Grm QTERM))
 --> 
"samsung"  \in  ((((\"))*([0-9]+))~(((\"))*([a-z]+)))((\"))*


>> cb_reduce_app(): GrammarIn("samsung", (Str2Grm QTERM)) ==> (= (AutomataDef samsung)
   (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 2))


>> cb_reduce_eq: j = __cOnStStR__x20_x3e_x20_x73_x61_x6d_x73_x75_x6e_x67

---------------------
Assertion Add(@1202, Level 0):
(= (Length (AutomataDef | > samsung|)) 10)
---------------------


 converted to : (and (>= (Length j) 0)
     (>= (Length __cOnStStR__x20_x3e_x20_x73_x61_x6d_x73_x75_x6e_x67) 0)
     (=> (= j (AutomataDef | > samsung|)) (= (Length j) 10))
     (= j (AutomataDef | > samsung|)))

>> cb_reduce_app(): Concat(g, j)
>> cb_reduce_app(): Concat(g, j)
False update 
---------------------
Assertion Add(@1422, Level 0):
(and (>= (Length g) 0)
     (>= (Length j) 0)
     (>= (Length (Concat g j)) 0)
     (= (Length (Concat g j)) (+ (Length g) (Length j))))
---------------------


convert to: (Concat g j)


>> cb_reduce_eq: w = (Concat g j)


 converted to : (and (>= (Length w) 0) (= w (Concat g j)))

>> cb_reduce_app(): Concat(g, j)
False update 

>> cb_reduce_eq: w = (NonDet_AutomataDef
  |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
  0)


 converted to : (and (>= (Length w) 0)
     (>= (Length (NonDet_AutomataDef
                   |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
                   0))
         0)
     (= w
        (NonDet_AutomataDef
          |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
          0)))

>> cb_reduce_eq: g = (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1)


 converted to : (and (>= (Length g) 0)
     (>= (Length (NonDet_AutomataDef
                   |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*|
                   1))
         0)
     (= g
        (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1)))

>> cb_reduce_eq: (AutomataDef samsung) = (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 2)


 converted to : (and (>= (Length (AutomataDef samsung)) 0)
     (>= (Length (NonDet_AutomataDef
                   |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*|
                   2))
         0)
     (= (AutomataDef samsung)
        (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 2)))

>> cb_reduce_app(): Length( "| > samsung|" ) = 12


>> cb_reduce_eq: j = (AutomataDef | > samsung|)


>> cb_reduce_eq: w = (Concat g j)


>> cb_reduce_app(): Concat(g, j)
False update 

>> cb_reduce_eq: w = (NonDet_AutomataDef
  |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
  0)


>> cb_reduce_eq: g = (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1)


>> cb_reduce_eq: (AutomataDef samsung) = (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 2)


>> cb_reduce_eq: j = (AutomataDef | > samsung|)


>> cb_reduce_eq: w = (Concat g j)


>> cb_reduce_app(): Concat(g, j)
False update 

>> cb_reduce_eq: w = (NonDet_AutomataDef
  |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
  0)


>> cb_reduce_eq: g = (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1)


>> cb_reduce_eq: (AutomataDef samsung) = (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 2)


>> cb_reduce_eq: j = (AutomataDef | > samsung|)


>> cb_reduce_eq: w = (Concat g j)



Var In Length = {}
***********************************************
*               Starting Search               *
-----------------------------------------------
(let ((a!1 (+ (Length j) (Length g) (* (- 1) (Length (Concat g j))))))
  (and (= (Length (AutomataDef | > samsung|)) 10)
       (= a!1 0)
       (>= (Length g) 0)
       (>= (Length j) 0)
       (>= (Length (Concat g j)) 0)
       (>= (Length w) 0)
       (>= (Length (NonDet_AutomataDef
                     |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
                     0))
           0)
       (= w
          (NonDet_AutomataDef
            |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
            0))
       (>= (Length (NonDet_AutomataDef
                     |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*|
                     1))
           0)
       (= g
          (NonDet_AutomataDef
            |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*|
            1))
       (>= (Length (AutomataDef samsung)) 0)
       (>= (Length (NonDet_AutomataDef
                     |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*|
                     2))
           0)
       (= (AutomataDef samsung)
          (NonDet_AutomataDef
            |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*|
            2))
       (= j (AutomataDef | > samsung|))
       (= w (Concat g j))))




=================================================================================
** cb_new_eq(): @0
(NonDet_AutomataDef
  |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
  0)  = w


** @2702 checkLengthConsistency

>> checkLengthConsistency: Passed
< = > A B C D E F G H I J K L M N O P Q R S T U V W X Y a b c d e f g h i j k l m n o p q r s t u v w x y 
** @3406 Cross Check and Update: (NonDet_AutomataDef
  |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
  0) == w

>> @3226 Eval Intersection size = 2
>> @3272 at Number of elements: 1 
(NonDet_AutomataDef
  |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
  0)


>> @3034 Eval Node (isIndependence = false): @0 (NonDet_AutomataDef
  |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
  0)
532 at ../src/regex.cpp: Create Automaton of: known


>> @3295 at __../src/StringTheory.cpp:Update interstion list = 1 -->  1


>> @3310  Element 0: 
 Automaton known:
States: 

Labels: 
32 34 48 49 50 51 52 53 54 55 56 57 60 61 62 92 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 
Inits: 
0 
Accepts: 
47 48 49 50 51 52 53 54 55 56 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 86 135 136 137 138 139 140 141 142 143 144 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 173 

>> @3323 at __../src/StringTheory.cpp: Result intersection: Automaton known:
States: 

Labels: 
32 34 48 49 50 51 52 53 54 55 56 57 60 61 62 92 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 
Inits: 
0 
Accepts: 
47 48 49 50 51 52 53 54 55 56 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 86 135 136 137 138 139 140 141 142 143 144 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 173  @3415 at After all: 
Automaton known:
States: 
0 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 
Labels: 
32 34 48 49 50 51 52 53 54 55 56 57 60 61 62 92 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 
Inits: 
0 
Accepts: 
47 48 49 50 51 52 53 54 55 56 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 86 135 136 137 138 139 140 141 142 143 144 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 173 

>> @2876 update Equal Map
w
(NonDet_AutomataDef
  |(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*))(( or )(( not ))*(( not ))*((((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)((( > )~( = )~( < )))(((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*)))*|
  0)


** 2797 Propagate node: w
 parents_filtered 





=================================================================================
** cb_new_eq(): @0
(NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1)  = g


** @2702 checkLengthConsistency

>> checkLengthConsistency: Passed
< = > A B C D E F G H I J K L M N O P Q R S T U V W X Y a b c d e f g h i j k l m n o p q r s t u v w x y 
** @3406 Cross Check and Update: (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1) == g

>> @3226 Eval Intersection size = 2
>> @3272 at Number of elements: 1 
(NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1)


>> @3034 Eval Node (isIndependence = false): @0 (NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1)
532 at ../src/regex.cpp: Create Automaton of: known


>> @3295 at __../src/StringTheory.cpp:Update interstion list = 1 -->  1


>> @3310  Element 0: 
 Automaton known:
States: 
0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 
Labels: 
34 48 49 50 51 52 53 54 55 56 57 92 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 
Inits: 
0 
Accepts: 
2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40 

>> @3323 at __../src/StringTheory.cpp: Result intersection: Automaton known:
States: 
0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 
Labels: 
34 48 49 50 51 52 53 54 55 56 57 92 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 
Inits: 
0 
Accepts: 
2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40  @3415 at After all: 
Automaton known:
States: 
0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 
Labels: 
34 48 49 50 51 52 53 54 55 56 57 92 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 
Inits: 
0 
Accepts: 
2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40 

>> @2876 update Equal Map
g
(NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 1)


** 2797 Propagate node: g
 parents_filtered 
(Concat g j)



>> @2919 at __../src/StringTheory.cpp: Update Node: @0 (Concat g j)

>> @3167 Eval Concat: g *concat* j

>> @3034 Eval Node (isIndependence = false): @0 g


>> @3094 at __../src/StringTheory.cpp:known node value Automaton known:
States: 
0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 
Labels: 
34 48 49 50 51 52 53 54 55 56 57 92 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 
Inits: 
0 
Accepts: 
2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40 

>> @3034 Eval Node (isIndependence = false): @0 j

>> @3226 Eval Intersection size = 1
>> @3272 at Number of elements: 0 


>> @3289 at __../src/StringTheory.cpp: UNKNOWN (0 elements)

>> @3045 Value of variable: @0: uNkNoWn 
(Concat g j)
>> @2978 at __../src/StringTheory.cpp: updated Concat value
 uNkNoWn




=================================================================================
** cb_new_eq(): @0
(NonDet_AutomataDef |((((\\"))*([0-9]+))~(((\\"))*([a-z]+)))((\\"))*| 2)  = (AutomataDef samsung)


** @2702 checkLengthConsistency

>> checkLengthConsistency: Passed
